{
  "version": 3,
  "sources": ["../../../../src/client/reactivity/reactive.ts", "../../../../src/client/templates/engine.ts", "../../../../src/client/templates/utils/hashTemplate.ts", "../../../../src/client/templates/utils/lazyRender.ts", "../../../../src/client/templates/utils/debounceRender.ts"],
  "sourcesContent": ["let activeEffect: Effect | null = null;\nconst effectStack: Effect[] = [];\n\nclass Dep {\n  subscribers: Set<Effect> = new Set();\n\n  depend() {\n    if (activeEffect) {\n      this.subscribers.add(activeEffect);\n      activeEffect.deps.add(this);\n    }\n  }\n\n  notify() {\n    const effects = Array.from(this.subscribers); // Collect subscribers\n\n    for (const effect of effects) {\n      if (effect.suspended) {\n        effect.resume();\n      } else {\n        effect.run();\n      }\n    }\n  }\n}\n\ntype EffectFnType = () => void | Promise<void>;\n\nclass Effect {\n  key: string;\n  fn: EffectFnType;\n  deps: Set<Dep> = new Set();\n  active: boolean = true;\n  suspended: boolean = false;\n  allowMutate: boolean = true;\n  running: boolean = false; // Add this line\n\n  constructor(fn: EffectFnType, key?: string) {\n    this.key = key || \"default\";\n    this.fn = fn;\n  }\n\n  run() {\n    if (!this.active || this.running) return; // Prevent re-entrant execution\n\n    this.running = true; // Set running to true\n\n    cleanupEffect(this);\n\n    try {\n      effectStack.push(this);\n      activeEffect = this;\n      this.allowMutate = false;\n\n      const result = this.fn();\n\n      if (result instanceof Promise) {\n        this.suspend();\n        result.finally(() => {\n          this.resume();\n        });\n      }\n    } finally {\n      this.allowMutate = true;\n      this.running = false; // Set running to false\n      effectStack.pop();\n      activeEffect = effectStack[effectStack.length - 1] || null;\n    }\n  }\n\n  suspend() {\n    this.suspended = true;\n  }\n\n  resume() {\n    if (this.suspended) {\n      this.suspended = false;\n    }\n  }\n\n  stop() {\n    if (this.active) {\n      cleanupEffect(this);\n      this.active = false;\n    }\n  }\n}\n\nfunction cleanupEffect(effect: Effect) {\n  effect.deps.forEach((dep) => {\n    dep.subscribers.delete(effect);\n  });\n  effect.deps.clear();\n}\nexport function effect(\n  fnOrEffects:\n    | (() => void | Promise<void>)\n    | { [key: string]: () => void | Promise<void> }\n): () => void {\n  let effectInstances: Effect[] = [];\n\n  if (typeof fnOrEffects === \"function\") {\n    // Single function\n    const effectInstance = new Effect(fnOrEffects, \"default\");\n    effectInstance.run();\n    effectInstances = [effectInstance];\n  } else {\n    // Object of functions\n    effectInstances = Object.entries(fnOrEffects).map(([key, fn]) => {\n      const effectInstance = new Effect(fn, key);\n      effectInstance.run();\n      return effectInstance;\n    });\n  }\n\n  return () => {\n    effectInstances.forEach((effectInstance) => effectInstance.stop());\n  };\n}\n\nexport function reactive<T extends object>(target: T): T {\n  const depMap = new Map<PropertyKey, Dep>();\n\n  const proxy = new Proxy(target, {\n    get(obj, prop: PropertyKey, receiver) {\n      let dep = depMap.get(prop);\n      if (!dep) {\n        dep = new Dep();\n        depMap.set(prop, dep);\n      }\n      dep.depend();\n      return Reflect.get(obj, prop, receiver);\n    },\n    set(obj, prop: PropertyKey, value, receiver) {\n      if (activeEffect && !activeEffect.allowMutate) {\n        throw new Error(\n          `Cannot mutate reactive state during effect execution.`\n        );\n      }\n\n      const oldValue = Reflect.get(obj, prop, receiver);\n      const result = Reflect.set(obj, prop, value, receiver);\n\n      if (oldValue !== value) {\n        const dep = depMap.get(prop);\n        if (dep) {\n          dep.notify();\n        }\n      }\n      return result;\n    },\n    // Other traps if needed\n  });\n\n  return proxy;\n}\n", "import { effect } from \"../reactivity/reactive.ts\";\n\nexport function parseTemplate(template: string, state: Record<string, any> = {}): DocumentFragment {\n  const fragment = document.createDocumentFragment();\n  const bindings: Array<{ node: Text; expression: string }> = [];\n\n  let index = 0;\n  const length = template.length;\n\n  while (index < length) {\n    const openIndex = template.indexOf('{{', index);\n\n    if (openIndex === -1) {\n      // Append remaining text\n      const text = template.slice(index);\n      fragment.appendChild(document.createTextNode(text));\n      break;\n    }\n\n    // Append text before the expression\n    if (openIndex > index) {\n      const text = template.slice(index, openIndex);\n      fragment.appendChild(document.createTextNode(text));\n    }\n\n    // Find the closing '}}'\n    const closeIndex = template.indexOf('}}', openIndex + 2);\n    if (closeIndex === -1) {\n      // No closing '}}', append the rest as text\n      const text = template.slice(openIndex);\n      fragment.appendChild(document.createTextNode(text));\n      break;\n    }\n\n    // Extract and evaluate the expression\n    const expression = template.slice(openIndex + 2, closeIndex).trim();\n    const textNode = document.createTextNode('');\n    fragment.appendChild(textNode);\n\n    // Evaluate and set initial value\n    updateTextNode(textNode, expression, state);\n\n    // Keep track of bindings for reactivity\n    bindings.push({ node: textNode, expression });\n\n    // Move the index past the closing '}}'\n    index = closeIndex + 2;\n  }\n\n  // Set up reactivity for each binding\n  bindings.forEach(({ node, expression }) => {\n    effect({\n      update() {\n        updateTextNode(node, expression, state);\n      },\n    });\n  });\n\n  return fragment;\n}\n\nfunction updateTextNode(node: Text, expression: string, state: Record<string, any>) {\n  try {\n    const value = new Function(...Object.keys(state), `return ${expression};`)(...Object.values(state));\n    node.textContent = value;\n  } catch (error) {\n    console.error(`Error evaluating expression \"${expression}\":`, error);\n    node.textContent = '';\n  }\n}\n\nexport function html(strings: string[], ...expressions: any[]) {\n  // Combine strings and expressions\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n    if (i < expressions.length) {\n      const expr = expressions[i];\n      // If the expression is a function, execute it\n      if (typeof expr === 'function') {\n        result += expr();\n      } else {\n        result += expr;\n      }\n    }\n  }\n  return result;\n}\n\nexport function parseTemplateString(templateString: string) {\n  // Create a template element\n  const template = document.createElement('template');\n  template.innerHTML = templateString.trim();\n\n  // Return the content of the template as a DocumentFragment\n  return template.content.cloneNode(true);\n}", "export async function hashTemplate(template: string): Promise<string> {\n  const response = await fetch(\"http://localhost:8000/api/hash\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ template }),\n  });\n\n  const res = await response.json();\n\n  if (response.ok) {\n    return res.data;\n  } else {\n    throw new Error(`Hashing failed: ${res.error}`);\n  }\n}", "import { effect } from \"../../reactivity/reactive.ts\";\nimport { parseTemplate } from \"../engine.ts\";\nimport { hashTemplate } from \"./hashTemplate.ts\";\n\nconst templateCache = new Map<string, { hash: string, fragment: DocumentFragment }>();\n\nexport async function renderTemplate(\n  template: string, \n  state: Record<string, any>, \n  element: HTMLElement\n) {\n  try {\n    // Generate hash for the template\n    const templateHash = await hashTemplate(template);\n\n    // Check if the template is cached and matches the current hash\n    const cachedTemplate = templateCache.get(template);\n    let fragment: DocumentFragment;\n    if (cachedTemplate && cachedTemplate.hash === templateHash) {\n      fragment = cachedTemplate.fragment.cloneNode(true) as DocumentFragment;\n    } else {\n      // Parse the template and bind it with the state\n      fragment = parseTemplate(template, state);\n\n      // Cache the new template with its hash\n      templateCache.set(template, { hash: templateHash, fragment });\n    }\n\n    // Clear the element's content and append the fragment\n    element.innerHTML = '';\n    element.appendChild(fragment);\n\n    // Set up reactivity effect\n    effect({\n      update: () => {\n        // Re-parse the template based on the updated state\n        const updatedFragment = parseTemplate(template, state);\n        element.innerHTML = ''; \n        element.appendChild(updatedFragment);\n      }\n    });\n\n  } catch (error) {\n    console.error(\"Error in renderTemplate:\", error);\n    throw error;\n  }\n}", "import { renderTemplate } from \"./lazyRender.ts\";\n\n\nlet updateTimeout: number | null = null;\nexport function renderTemplateDebounced(template: string, state: Record<string, any>, element: HTMLElement) {\n  if (updateTimeout) clearTimeout(updateTimeout);\n\n  updateTimeout = globalThis.setTimeout(() => {\n    renderTemplate(template, state, element);\n  }, 50); // Debounce time\n}"],
  "mappings": "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",
  "names": ["effect"]
}
