{
  "version": 3,
  "sources": ["../../../../../../src/client/reactivity/reactive.ts", "../../../../../../src/client/components/core/functions/mixins/Accessible.ts"],
  "sourcesContent": ["let activeEffect: Effect | null = null;\nconst effectStack: Effect[] = [];\n\nclass Dep {\n  subscribers: Set<Effect> = new Set();\n\n  depend() {\n    if (activeEffect) {\n      this.subscribers.add(activeEffect);\n      activeEffect.deps.add(this);\n    }\n  }\n\n  notify() {\n    const effects = Array.from(this.subscribers); // Collect subscribers\n\n    for (const effect of effects) {\n      if (effect.suspended) {\n        effect.resume();\n      } else {\n        effect.run();\n      }\n    }\n  }\n}\n\ntype EffectFnType = () => void | Promise<void>;\n\nclass Effect {\n  key: string;\n  fn: EffectFnType;\n  deps: Set<Dep> = new Set();\n  active: boolean = true;\n  suspended: boolean = false;\n  allowMutate: boolean = true;\n  running: boolean = false; // Add this line\n\n  constructor(fn: EffectFnType, key?: string) {\n    this.key = key || \"default\";\n    this.fn = fn;\n  }\n\n  run() {\n    if (!this.active || this.running) return; // Prevent re-entrant execution\n\n    this.running = true; // Set running to true\n\n    cleanupEffect(this);\n\n    try {\n      effectStack.push(this);\n      activeEffect = this;\n      this.allowMutate = false;\n\n      const result = this.fn();\n\n      if (result instanceof Promise) {\n        this.suspend();\n        result.finally(() => {\n          this.resume();\n        });\n      }\n    } finally {\n      this.allowMutate = true;\n      this.running = false; // Set running to false\n      effectStack.pop();\n      activeEffect = effectStack[effectStack.length - 1] || null;\n    }\n  }\n\n  suspend() {\n    this.suspended = true;\n  }\n\n  resume() {\n    if (this.suspended) {\n      this.suspended = false;\n    }\n  }\n\n  stop() {\n    if (this.active) {\n      cleanupEffect(this);\n      this.active = false;\n    }\n  }\n}\n\nfunction cleanupEffect(effect: Effect) {\n  effect.deps.forEach((dep) => {\n    dep.subscribers.delete(effect);\n  });\n  effect.deps.clear();\n}\nexport function effect(\n  fnOrEffects:\n    | (() => void | Promise<void>)\n    | { [key: string]: () => void | Promise<void> }\n): () => void {\n  let effectInstances: Effect[] = [];\n\n  if (typeof fnOrEffects === \"function\") {\n    // Single function\n    const effectInstance = new Effect(fnOrEffects, \"default\");\n    effectInstance.run();\n    effectInstances = [effectInstance];\n  } else {\n    // Object of functions\n    effectInstances = Object.entries(fnOrEffects).map(([key, fn]) => {\n      const effectInstance = new Effect(fn, key);\n      effectInstance.run();\n      return effectInstance;\n    });\n  }\n\n  return () => {\n    effectInstances.forEach((effectInstance) => effectInstance.stop());\n  };\n}\n\nexport function reactive<T extends object>(target: T): T {\n  const depMap = new Map<PropertyKey, Dep>();\n\n  const proxy = new Proxy(target, {\n    get(obj, prop: PropertyKey, receiver) {\n      let dep = depMap.get(prop);\n      if (!dep) {\n        dep = new Dep();\n        depMap.set(prop, dep);\n      }\n      dep.depend();\n      return Reflect.get(obj, prop, receiver);\n    },\n    set(obj, prop: PropertyKey, value, receiver) {\n      if (activeEffect && !activeEffect.allowMutate) {\n        throw new Error(\n          `Cannot mutate reactive state during effect execution.`\n        );\n      }\n\n      const oldValue = Reflect.get(obj, prop, receiver);\n      const result = Reflect.set(obj, prop, value, receiver);\n\n      if (oldValue !== value) {\n        const dep = depMap.get(prop);\n        if (dep) {\n          dep.notify();\n        }\n      }\n      return result;\n    },\n    // Other traps if needed\n  });\n\n  return proxy;\n}\n", "// src/mixins/Accessible.ts\n\nimport { SkyeComponent } from \"../../SkyeComponent.ts\";\nimport { type Constructor } from \"../../SkyeComponent.ts\";\nimport { effect } from \"../../../../reactivity/reactive.ts\";\n\nfunction Accessible<TBase extends Constructor<SkyeComponent>>(Base: TBase) {\n  return class AccessibleComponent extends Base {\n    private handleKeyDownBound: (event: KeyboardEvent) => void;\n\n    constructor(...args: any[]) {\n      super(...args);\n      this.handleKeyDownBound = this.handleKeyDown.bind(this);\n    }\n\n    override connectedCallback(): void {\n      super.connectedCallback && super.connectedCallback();\n      this.setupAccessibility();\n    }\n\n    override disconnectedCallback(): void {\n      super.disconnectedCallback && super.disconnectedCallback();\n      this.removeEventListener(\"keydown\", this.handleKeyDownBound);\n    }\n\n    setupAccessibility(): void {\n      // Existing accessibility setup...\n\n      // Keyboard Navigation\n      this.addEventListener(\"keydown\", this.handleKeyDownBound);\n\n      // Setup reactive ARIA attributes\n      this.setupAriaStateReactivity();\n    }\n\n    setupAriaStateReactivity(): void {\n      effect({\n        updateAriaAttributes: () => {\n          if (\"expanded\" in this.state) {\n            this.setAttribute(\"aria-expanded\", String(this.state.expanded));\n          }\n          if (\"disabled\" in this.state) {\n            this.setAttribute(\"aria-disabled\", String(this.state.disabled));\n          }\n        },\n      });\n    }\n\n    handleKeyDown(event: KeyboardEvent): void {\n      if (event.key === \"Enter\" || event.key === \" \") {\n        this.click();\n        event.preventDefault();\n      }\n    }\n\n    generateAriaLabel(): string | null {\n      const heading = this.querySelector(\"h1, h2, h3, h4, h5, h6\");\n      return heading ? heading.textContent?.trim() || null : null;\n    }\n  };\n}\n\nexport { Accessible };"],
  "mappings": "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",
  "names": ["effect"]
}
